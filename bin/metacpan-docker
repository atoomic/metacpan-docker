#!/usr/bin/env bash
# metacpan-docker: simple wrapper for docker-compose running MetaCPAN

set -e

GitRepos=("metacpan-api" "metacpan-web")

# sanity check
type "docker" > /dev/null
type "docker-compose" > /dev/null

git_clone_and_setup_hooks() {
    local repo=$1
    (
        cd src
        [ -d "$repo" ] || git clone https://github.com/metacpan/$repo.git
        cd $repo
        [ -e git/hooks/pre-commit ] && chmod +x git/hooks/pre-commit
        cd .git/hooks
        ln -sf ../../git/hooks/pre-commit
    )
    echo "Repository $repo ready."
}

init() {
    echo "Initializing metacpan-docker repositories:"
    mkdir -p src
    for repo in ${GitRepos[@]}; do
        git_clone_and_setup_hooks $repo
    done
    echo "metacpan-docker ready!  Run 'bin/metacpan-docker localapi up' to start."
}

git_update_repo() {
    local repo=$1
    (
        cd src/$repo
        git fetch origin
        git pull origin master
    )
    echo "Repository $repo updated."
}

git_reset_repo() {
    local repo=$1
    echo "Updating repository $repo"
    (
        cd src/$repo
        git fetch origin
        git checkout master
        git pull origin master
    )
    echo "Repository $repo updated."
}

update() {
    echo "Updating metacpan-docker repositories from upstream"

    for repo in ${GitRepos[@]}; do
        git_update_repo $repo
    done
}

reset_repo() {
    echo "Resetting metacpan-docker repositories:"

    for repo in ${GitRepos[@]}; do
        git_reset_repo $repo
    done
}


case "x$1" in
    'xinit')
        init
        exit
        ;;
    'xreset')
        reset_repo
        exit
        ;;
    'xpull')
        update
        exit
        ;;
    'xlocalapi')
        shift
        ;;
    'x')
        init
        update
        exit
        ;;
    *)
        ;;
esac

exec docker-compose "$@"
